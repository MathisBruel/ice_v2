@startuml Class Diagram WebCentral
title "Class Diagram WebCentral"
skinparam linetype polyline
skinparam linetype ortho
hide empty members

'pf = ' pointeur de fonction sur la focntion qui d√©clenchera la transision 

package Domain {
    class Content {
        - int id
        - string title
        - Releases* release
        - ContentRepo* contentRepo
        --
        + CreateRelease(int id_movie, TypeMovie typeMovie, 
        LocalisationMovie localisationMovie)

        + setDatas(string title)
        + setRelease(Releases* release)

        + int* getId()
        + string getTitle()
        + Releases* getRelease()
    }
    class ContentRepo {
        --
        + create(Content* content)
        + read(Content* content)
        + update(Content* content)
        + remove(Content* content)
    }
    class ContentRepo #LightYellow
    Content o-- ContentRepo #DarkGoldenRod 

    class Releases {
        - int ids[3]
        - string cisPath
        - CIS* cis
        - CPL* cpl
        - SyncLoop* syncLoop
        - ReleaseRepo* releaseRepo
        --
        + UploadCIS(string cisPath)
        + UploadCPL(int id_serv_pair_config,
        string uuid, string name, string cplPath)
        + UploadSyncLoop(int id_serv_pair_config, 
        string syncLoopPath)

        + setId(int id_movie, TypeMovie typeMovie, 
        LocalisationMovie localisationMovie)
        + setReleaseInfos(string cisPath)
        + setCis(CIS* cis)
        + setCPL(CPL* cpl)
        + setSyncLoop(SyncLoop* syncLoop)

        + int* getId()
        + string getCISPath()
        + CIS* getCIS()
        + CPL* getCPL()
        + SyncLoop* getSyncLoop()
    }
    Content o-- Releases #DarkGrey
    class ReleaseRepo {
        --
        + create(Releases* release)
        + read(Releases* release)
        + update(Releases* release)
        + remove(Releases* release)
    }
    class ReleaseRepo #LightYellow
    Releases o-- ReleaseRepo #DarkGoldenRod

    class CIS {
        - int ids[4]
        - string pathCIS
        - CISRepo* cisRepo
        --
        + setId(int id_movie, int id_type, 
        int id_localisation)
        + setCISInfos(string pathCIS)

        + int* getId()
        + string getCISPath()
    }
    Releases o-- CIS #DarkGrey
    class CISRepo {
        --
        + create(CIS* cis)
        + read(CIS* cis)
        + update(CIS* cis)
        + remove(CIS* cis)
    }
    class CISRepo #LightYellow
    CIS o-- CISRepo #DarkGoldenRod 

    class CPL {
        - int ids[4]
        - string uuid
        - string name
        - string pathCPL
        - CPLRepo* cplRepo
        - Sync* sync
        --
        + CreateSync(string pathSync)

        + setId(int id_serv_pair_config, int id_movie, 
        int id_type, int id_localisation)
        + setDatas(string uuid, string name)
        + setCplInfos(string pathCpl)

        + int* getId()
        + string getUuid()
        + string getName()
        + string getCplPath()
        + Sync* getSync()
    }
    Releases o-- CPL #DarkGrey
    class CPLRepo {
        --
        + create(CPL* cpl)
        + read(CPL* cpl)
        + update(CPL* cpl)
        + remove(CPL* cpl)
    }
    class CPLRepo #LightYellow
    CPL o-- CPLRepo #DarkGoldenRod 

    class Sync {
        - int ids[4]
        - string pathSync
        - SyncRepo* syncRepo
        --
        + setID(int id_serv_pair_config, int id_movie, 
        int id_type, int id_localisation)
        + setSyncInfos(string pathSync)

        + int* getID()
        + string getSyncPath()
    }
    CPL o-- Sync #DarkGrey
    class SyncRepo {
        --
        + create(Sync* sync)
        + read(Sync* sync)
        + update(Sync* sync)
        + remove(Sync* sync)
    }
    class SyncRepo #LightYellow
    Sync o-- SyncRepo #DarkGoldenRod 

    class SyncLoop {
        - int ids[4]
        - string pathSyncLoop
        - SyncLoopRepo* syncLoopRepo
        --
        + setID(int id_serv_pair_config, int id_movie,
        int id_type, int id_localisation)
        + setSyncLoopInfos(string pathSyncLoop)

        + int* getID()
        + string getSyncLoopPath()
    }
    Releases o-- SyncLoop #DarkGrey
    class SyncLoopRepo {
        --
        + create(SyncLoop* syncloop)
        + read(SyncLoop* syncloop)
        + update(SyncLoop* syncloop)
        + remove(SyncLoop* syncloop)
    }
    class SyncLoopRepo #LightYellow
    SyncLoop o-- SyncLoopRepo #DarkGoldenRod 

    enum TypeMovie
    Releases o-up- TypeMovie #DarkGrey
    enum LocalisationMovie
    Releases o-up- LocalisationMovie #DarkGrey
}

package App {
    abstract StateTemplate <<HFSM2>> {
        + FullControl* StateControl
    }

    abstract StateTemplate <<HFSM2>> #LightCyan
    struct State_Idle{
        --
        entryGuard(FullControl& control)
        enter()
        Transition()
    }
    struct State_Idle <<HFSM2>> #LightBlue
    StateTemplate <|-- State_Idle #DarkCyan
    class Idle_Interaction {
        + State_Idle* State
        --
        + (State_Idle::*pfTransition)()
    }
    class Idle_Interaction #lightgrey
    State_Idle -- Idle_Interaction #DarkBlue

    struct State_ContentInit {
        --
        entryGuard(FullControl& control)
        enter()
        Transition()
    }
    struct State_ContentInit <<HFSM2>> #LightBlue
    StateTemplate <|-- State_ContentInit #DarkCyan
    State_ContentInit o-- Content #Blue;text:Blue; : To Create Release 
    class Content_Interaction {
        + State_ContentInit* State
        --
        + (State_ContentInit::*pfTransition)()
    }
    class Content_Interaction #lightgrey
    State_ContentInit -- Content_Interaction #DarkBlue

    struct State_ReleaseCreation {
        --
        entryGuard(FullControl& control)
        enter()
        Transition()
    }
    struct State_ReleaseCreation <<HFSM2>> #LightBlue
    StateTemplate <|-- State_ReleaseCreation #DarkCyan
    State_ReleaseCreation o-- Content #Blue;text:Blue; : Create Release
    class Release_Interaction {
        + State_ReleaseCreation* State
        --
        + (State_ReleaseCreation::*pfTransition)()
    }
    class Release_Interaction #lightgrey
    State_ReleaseCreation -- Release_Interaction #DarkBlue

    struct State_Publishing {
        --
        entryGuard(FullControl& control)
        enter()
        Transition()
    }
    struct State_Publishing <<HFSM2>> #LightBlue
    StateTemplate <|-- State_Publishing #DarkCyan
    class Publishing_Interaction {
        + State_Publishing* State
        --
        + (State_Publishing::*pfTransition)()
    }
    class Publishing_Interaction #lightgrey
    State_Publishing -- Publishing_Interaction #DarkBlue
    State_Publishing o-- CIS #Blue;text:Blue; :Publish
    State_Publishing o-- Sync #Blue;text:Blue; :Publish
    State_Publishing o-- SyncLoop #Blue;text:Blue; :Publish

    struct State_UploadCIS {
        --
        entryGuard(FullControl& control)
        enter()
        Transition()
    }
    struct State_UploadCIS <<HFSM2>> #LightBlue
    StateTemplate <|-- State_UploadCIS #DarkCyan  
    State_UploadCIS o-- Releases #Blue;text:Blue; : Upload CIS
    class CIS_Interaction {
        + State_UploadCIS* State
        --
        + (State_UploadCIS::*pfTransition)() 
    }
    class CIS_Interaction #lightgrey
    State_UploadCIS -- CIS_Interaction #DarkBlue

    struct State_SyncCreate {
        --
        enter()
    }
    struct State_SyncCreate <<HFSM2>> #LightBlue
    StateTemplate <|-- State_SyncCreate #DarkCyan

    struct State_IdleSync <<HFSM2>> #LightBlue
    StateTemplate <|-- State_IdleSync #DarkCyan
    class IdleSync_Interaction {
        + State_IdleSync* State
        --
        + (State_IdleSync::*pfTransitionToCPL)()
        + (State_IdleSync::*pfTransitionToSYNCLOOP)()
    }
    class IdleSync_Interaction #lightgrey
    State_IdleSync -- IdleSync_Interaction #DarkBlue

    struct State_CPL {
        --
        entryGuard(FullControl& control)
        enter()
        Transition()
    }
    struct State_CPL <<HFSM2>> #LightBlue
    StateTemplate <|-- State_CPL #DarkCyan
    State_CPL o-- CPL #Blue;text:Blue; : Create CPL
    class CPL_Interaction {
        + State_CPL* State
        --
        + (State_CPL::*pfTransition)()
    }
    class CPL_Interaction #lightgrey
    State_CPL -- CPL_Interaction #DarkBlue

    struct State_Sync {
        --
        entryGuard(FullControl& control)
        enter()
        Transition()
    }
    struct State_Sync <<HFSM2>> #LightBlue
    StateTemplate <|-- State_Sync #DarkCyan
    State_Sync o-- Sync #Blue;text:Blue; : Create Sync
    class Sync_Interaction {
        + State_Sync* State
        --
        + (State_Sync::*pfTransition)()
    }
    class Sync_Interaction #lightgrey
    State_Sync -- Sync_Interaction #DarkBlue

    struct State_SyncLoop {
        --
        entryGuard(FullControl& control)
        enter()
        Transition()
    }
    struct State_SyncLoop <<HFSM2>> #LightBlue
    StateTemplate <|-- State_SyncLoop #DarkCyan
    State_SyncLoop o-- Releases #Blue;text:Blue; : Create SyncLoop
    class SyncLoop_Interaction {
        + State_SyncLoop* State
        --
        + (State_SyncLoop::*pfTransition)()
    }
    class SyncLoop_Interaction #lightgrey
    State_SyncLoop -- SyncLoop_Interaction #DarkBlue

    ' struct State_Cancel {
    '     --
    '     entryGuard(FullControl& control)
    '     enter()
    '     Transition()
    ' }
    ' struct State_Cancel <<HFSM2>> #LightBlue
    ' StateTemplate <|-- State_Cancel #DarkCyan
    ' class Cancel_Interaction #lightgrey
    ' State_Cancel -- Cancel_Interaction #DarkBlue

    struct State_InProd {
        --
        entryGuard(FullControl& control)
        enter()
        Transition()
    }
    struct State_InProd <<HFSM2>> #LightBlue
    StateTemplate <|-- State_InProd #DarkCyan
    class InProd_Interaction {
        + State_InProd* State
        --
        + (State_InProd::*pfTransition)()
    }
    class InProd_Interaction #lightgrey
    State_InProd -- InProd_Interaction #DarkBlue
}

package Infrastructure {
    package Infrastructure::MySQL{

        class MySQLContentRepo {
            string database
            string table
            --
            + Query* MySQLcreate(Content* content)
            + Query* MySQLread(Content* content)
            + Query* MySQLupdate(Content* content) 
            + Query* MySQLremove(Content* content)
        }
        class MySQLContentRepo #LightPink
        ContentRepo <|-- MySQLContentRepo #Red
        
        class MySQLReleaseRepo {
            - string database
            - string table
            --
            + Query* MySQLcreate(Releases* release)
            + Query* MySQLread(Releases* release)
            + Query* MySQLupdate(Releases* release)
            + Query* MySQLremove(Releases* release)
        }
        class MySQLReleaseRepo #LightPink
        ReleaseRepo <|-- MySQLReleaseRepo #Red
        
        class MySQLCISRepo {
            - string database
            - string table
            --
            + Query* MySQLcreate(CIS* cis)
            + Query* MySQLread(CIS* cis)
            + Query* MySQLupdate(CIS* cis)
            + Query* MySQLremove(CIS* cis)
        }
        class MySQLCISRepo #LightPink
        CISRepo <|-- MySQLCISRepo #Red
        
        class MySQLCPLRepo {
            - string database
            - string table
            --
            + Query* MySQLcreate(CPL* cpl)
            + Query* MySQLread(CPL* cpl)
            + Query* MySQLupdate(CPL* cpl)
            + Query* MySQLremove(CPL* cpl)
        }
        class MySQLCPLRepo #LightPink
        CPLRepo <|-- MySQLCPLRepo #Red
        
        class MySQLSyncRepo {
            - string database
            - string table
            --
            + Query* MySQLcreate(CPL* cpl)
            + Query* MySQLread(CPL* cpl)
            + Query* MySQLupdate(CPL* cpl)
            + Query* MySQLremove(CPL* cpl)
        }
        class MySQLSyncRepo #LightPink
        SyncRepo <|-- MySQLSyncRepo #Red
        
        class MySQLSyncLoopRepo {
            - string database
            - string table
            --
            + Query* MySQLcreate(SyncLoop* syncloop)
            + Query* MySQLread(SyncLoop* syncloop)
            + Query* MySQLupdate(SyncLoop* syncloop)
            + Query* MySQLremove(SyncLoop* syncloop)
        }
        class MySQLSyncLoopRepo #LightPink
        SyncLoopRepo <|-- MySQLSyncLoopRepo #Red

        class MySQLDBConnection {
            - DatabaseConnector* database
            --
            + bool initConnection()
            + ResultQuery* executeQuery(Query* query)
        }
        class MySQLDBConnection #LightPink
        MySQLContentRepo o-- MySQLDBConnection #Red
        MySQLReleaseRepo o-- MySQLDBConnection #Red
        MySQLCISRepo o-- MySQLDBConnection #Red
        MySQLCPLRepo o-- MySQLDBConnection #Red
        MySQLSyncRepo o-- MySQLDBConnection #Red
        MySQLSyncLoopRepo o-- MySQLDBConnection #Red
    }
    package Infrastructure::HTTP {
        interface HTTPInteraction {
            --
            + run()
        }
        class HTTPIdleInteraction {
            - Idle_Interaction* StateInteraction
            --
            + HTTPIdleInteraction()
            + HTTPIdleInteraction(Idle_Interaction* Interactor)
            + ~HTTPIdleInteraction()

            + SetInteractor(Idle_Interaction* Interactor)
            + run()
        }
        class HTTPIdleInteraction #LightGreen
        Idle_Interaction --o HTTPIdleInteraction #Green
        HTTPIdleInteraction --|> HTTPInteraction
        class HTTPContentInteraction {
            - Content_Interaction* StateInteraction
            --
            + HTTPContentInteraction()
            + HTTPContentInteraction(Content_Interaction* Interactor)
            + ~HTTPContentInteraction()

            + SetInteractor(Content_Interaction* Interactor)
            + run()
        }
        class HTTPContentInteraction #LightGreen
        Content_Interaction --o HTTPContentInteraction #Green
        HTTPContentInteraction --|> HTTPInteraction
        class HTTPReleaseInteraction {
            - Release_Interaction* StateInteraction
            --
            + HTTPReleaseInteraction()
            + HTTPReleaseInteraction(Release_Interaction* Interactor)
            + ~HTTPReleaseInteraction()

            + SetInteractor(Release_Interaction* Interactor)
            + run()
        }
        class HTTPReleaseInteraction #LightGreen
        Release_Interaction --o HTTPReleaseInteraction #Green
        HTTPReleaseInteraction --|> HTTPInteraction
        class HTTPCISInteraction {
            - CIS_Interaction* StateInteraction
            --
            + HTTPCISInteraction()
            + HTTPCISInteraction(CIS_Interaction* Interactor)
            + ~HTTPCISInteraction()
            
            + SetInteractor(CIS_Interaction* Interactor)
            + run()
        }
        class HTTPCISInteraction #LightGreen
        CIS_Interaction --o HTTPCISInteraction #Green
        HTTPCISInteraction --|> HTTPInteraction
        class HTTPIdleSyncInteraction {
            - bool SyncLoop 
            - IdleSync_Interaction* StateInteraction
            --
            + HTTPIdleSyncInteraction()
            + HTTPIdleSyncInteraction(IdleSync_Interaction* Interactor)
            + HTTPIdleSyncInteraction(IdleSync_Interaction* Interactor, bool SyncLoop)
            + ~HTTPIdleSyncInteraction()
            
            + SetInteractor(IdleSync_Interaction* Interactor)
            + SetSyncLoop(bool SyncLoop)
            + run()
        }
        class HTTPIdleSyncInteraction #LightGreen
        IdleSync_Interaction --o HTTPIdleSyncInteraction #Green
        HTTPIdleSyncInteraction --|> HTTPInteraction
        class HTTPCPLInteraction {
            - CPL_Interaction* StateInteraction
            --
            + HTTPCPLInteraction()
            + HTTPCPLInteraction(CPL_Interaction* Interactor)
            + ~HTTPCPLInteraction()

            + SetInteractor(CPL_Interaction* Interactor)
            + run()
        }
        class HTTPCPLInteraction #LightGreen
        CPL_Interaction --o HTTPCPLInteraction #Green
        HTTPCPLInteraction --|> HTTPInteraction
        class HTTPSyncInteraction {
            - Sync_Interaction* StateInteraction
            --
            + HTTPSyncInteraction()
            + HTTPSyncInteraction(Sync_Interaction* Interactor)
            + ~HTTPSyncInteraction()

            + SetInteractor(Sync_Interaction* Interactor)
            + run()
        }
        class HTTPSyncInteraction #LightGreen
        Sync_Interaction --o HTTPSyncInteraction #Green 
        HTTPSyncInteraction --|> HTTPInteraction
        class HTTPSyncLoopInteraction {
            - SyncLoop_Interaction* StateInteraction
            --
            + HTTPSyncLoopInteraction()
            + HTTPSyncLoopInteraction(SyncLoop_Interaction* Interactor)
            + ~HTTPSyncLoopInteraction()
            
            + SetInteractor(SyncLoop_Interaction* Interactor)
            + run()
        }
        class HTTPSyncLoopInteraction #LightGreen
        SyncLoop_Interaction --o HTTPSyncLoopInteraction #Green
        HTTPSyncLoopInteraction --|> HTTPInteraction
        class HTTPPublishingInteraction {
            - Publishing_Interaction* StateInteraction
            --
            + HTTPPublishingInteraction()
            + HTTPPublishingInteraction(Publishing_Interaction* Interactor)
            + ~HTTPPublishingInteraction()

            + SetInteractor(Publishing_Interaction* Interactor)
            + run()
        }
        class HTTPPublishingInteraction #LightGreen
        Publishing_Interaction --o HTTPPublishingInteraction #Green
        HTTPPublishingInteraction --|> HTTPInteraction
        class HTTPInProdInteraction {
            - InProd_Interaction* StateInteraction
            --
            + HTTPInProdInteraction()
            + HTTPInProdInteraction(InProd_Interaction* Interactor)
            + ~HTTPInProdInteraction()

            + SetInteractor(InProd_Interaction* Interactor)
            + run()
        }
        class HTTPInProdInteraction #LightGreen
        InProd_Interaction --o HTTPInProdInteraction #Green
        HTTPInProdInteraction --|> HTTPInteraction
        ' class HTTPCancelInteraction {
        '     - Cancel_Interaction* StateInteraction
        '     --
        '     + run()
        ' }
        ' class HTTPCancelInteraction #LightGreen
        ' Cancel_Interaction --o HTTPCancelInteraction #Green
        ' HTTPCancelInteraction --|> HTTPInteraction
    }
}
@enduml