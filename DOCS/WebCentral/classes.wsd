@startuml Class Diagram WebCentral
title "Class Diagram WebCentral"
skinparam linetype polyline
skinparam linetype ortho
hide empty members

package LIB-CONTEXT-CENTRAL {
    class HSFM2<<LibHeaderOnly>> #B5CFE2
    package Domain #FFEEA9 {
        class Content #FBA834    {
            - ContentRepo* _contentRepo
            - map<string, Releases*> _release
            - int _contentId
            - string _contentTitle
            --
            + Content(string contentTitle)
            + CreateRelease(int id_movie, int typeMovie, int localisationMovie)
    
            + SetContentId(int contentId)
            + SetDatas(string contentTitle)
            + AddRelease(Releases* release)
            + DeleteRelease(string releaseId)
            + string toXmlString(bool printChild)   

            + int* GetContentId() {return &this->_contentId}
            + string GetContentTitle() {return this->_contentTitle}
            + sap<string, Releases*> GetReleases() {return this->_release}
            + Releases* GetRelease(string releaseId) {return this->_release[releaseId]}
        }
        class ContentRepo #LightYellow {
            + Create(Content* content)
            + Read(Content* content)
            + Update(Content* content)
            + Remove(Content* content)
        }
        ContentRepo --o Content

        class Releases #FBA834   {
            - ReleaseRepo* _releaseRepo
            - CIS* _cis
            - CPL* _cpl
            - SyncLoop* _syncLoop

            - int _releaseId[3]
            - string _CPLRefPath
            --
            + UploadCIS(string CISPath)
            + UploadCPL(int id_serv_pair_config, string uuid, string name, string cplPath)
            + UploadSyncLoop(int id_serv_pair_config, string SyncLoopPath)
            + string toXmlString()

            + SetReleaseId(int id_movie, TypeMovie typeMovie, LocalisationMovie localisationMovie)
            + SetReleaseInfos(string CPLRefPath)
            + SetCIS(CIS* cis)
            + SetCPL(CPL* cpl)
            + SetSyncLoop(SyncLoop* syncLoop)

            + int* GetReleaseId()
            + string GetCPLRefPath()
            + CIS* GetCIS()
            + CPL* GetCPL()
            + SyncLoop* GetSyncLoop()
        }
        Releases --o Content
        class ReleaseRepo #LightYellow {
            + Create(Releases* release)
            + Read(Releases* release)
            + Update(Releases* release)
            + Remove(Releases* release)
        }
        ReleaseRepo --o Releases

        class CIS #FBA834    {
            - CISRepo* _CISRepo
            - int _CISid[3]
            - string _CISPath
            --
            + SetCISId(int cisId)
            + SetCISPath(string cisPath)
            + string toXmlString()

            + int* GetCISId()
            + string GetCISPath()
        }
        CIS --o Releases
        class CISRepo #LightYellow {
            + Create(CIS* cis)
            + Read(CIS* cis)
            + Update(CIS* cis)
            + Remove(CIS* cis)
        }
        CISRepo --o CIS

        class CPL #FBA834    {
            - CPLRepo* _cplRepo
            - Sync* _sync

            - int _CPLId[4]
            - string _CPLUUID
            - string _CPLName
            - string _CPLPath
            --
            + CreateSync(string SyncPath)

            + SetCPLId(int id_serv_pair_config, int id_movie, int id_type, int id_localisation)
            + SetDatas(string CPLUUID, string CPLName)
            + SetCplInfos(string CPLPath)

            + int* GetCPLId()
            + string GetCPLUUID()
            + string GetCPLName()
            + string GetCPLPath()
            + Sync* GetSync()
        }
        CPL --o Releases
        class CPLRepo #LightYellow {
            + Create(CPL* cpl)
            + Read(CPL* cpl)
            + Update(CPL* cpl)
            + Remove(CPL* cpl)
        }
        CPLRepo --o CPL

        class Sync #FBA834   {
            - SyncRepo* _syncRepo

            - int _syncId[4]
            - string _syncPath
            --
            + SetSyncId(int id_serv_pair_config, int id_movie, int id_type, int id_localisation)
            + SetSyncInfos(string SyncPath)

            + int* GetSyncID()
            + string GetSyncPath()
        }
        Sync --o CPL
        class SyncRepo #LightYellow {
            + Create(Sync* sync)
            + Read(Sync* sync)
            + Update(Sync* sync)
            + Remove(Sync* sync)
        }
        SyncRepo --o Sync

        class SyncLoop #FBA834   {
            SyncLoopRepo* _syncLoopRepo

            int _syncLoopId[4]
            string _SyncLoopPath
            --
            SetSyncLoopId(int id_serv_pair_config, int id_movie, int id_type, int id_localisation)
            SetSyncLoopInfos(string SyncLoopPath)

            int* GetSyncLoopId()
            string GetSyncLoopPath()
        }
        SyncLoop --o Releases
        class SyncLoopRepo #LightYellow {
            + Create(SyncLoop* syncLoop)
            + Read(SyncLoop* syncLoop)
            + Update(SyncLoop* syncLoop)
            + Remove(SyncLoop* syncLoop)
        }
        SyncLoopRepo --o SyncLoop
        enum TypeMovie #FBA834  
        TypeMovie --o Releases
        enum LocalisationMovie #FBA834  
        LocalisationMovie --o Releases
    }
    package App #AAD7D9 {
        class ContentInteraction #LightGrey {
            function<TransitionResponse(string, map<string, string>)> pfStateContentInit
            function<void()> pfTransitionToPublishing
        }
        class PublishingInteraction #LightGrey {
            function<TransitionResponse(string, map<string, string>)> pfStatePublishing
            function<void()> pfTransitionToReleaseCreation
            function<void()> pfTransitionToCancel
        }
        class ReleaseInteraction #LightGrey {
            function<TransitionResponse(string, map<string, string>)> pfStateReleaseCreation
            function<void()> pfTransitionToPublishing
        }
        class CISInteraction #LightGrey {
            function<TransitionResponse(string, map<string, string>)> pfStateUploadCIS
            function<void()> pfTransitionToInProduction
        }
        class IdleSyncInteraction #LightGrey {
            function<TransitionResponse(string, map<string,string>)> pfStateIdleSync
            function<void()> pfTransitionToCPL
            function<void()> pfTransitionToSyncLoop
        }
        class CPLInteraction #LightGrey {
            function<TransitionResponse(string, map<string,string>)> pfStateCPL
            function<void()> pfTransitionToSync
        }
        class SyncInteraction #LightGrey {
            function<TransitionResponse(string, map<string, string>)> pfStateSync
            function<void()> pfTransitionToInProduction
        }
        class SyncLoopInteraction #LightGrey {
            function<TransitionResponse(string, map<string, string>)> pfStateSyncLoop
            function<void()> pfTransitionToInProduction
        }
        class InProdInteraction #LightGrey {
            function<TransitionResponse(string, map<string, string>)> pfStateInProd
        }

        struct Context #A6A6A6 {
            + bool cisFinish
            + bool syncFinish
            + Content* content
            + Releases* release
            + ContentInteraction* contentInteraction
            + PublishingInteraction* publishingInteraction
            + ReleaseInteraction* releaseInteraction
            + CISInteraction* cisInteraction
            + IdleSyncInteraction* idleSyncInteraction
            + CPLInteraction* cplInteraction
            + SyncInteraction* syncInteraction
            + SyncLoopInteraction* syncLoopInteraction
            + InProdInteraction* inProdInteraction
            + MySQLDBConnection* dbConnection
        }
        Context o-- ContentInteraction
        Context o-- PublishingInteraction
        Context o-- ReleaseInteraction
        Context o-- CISInteraction
        Context o-- IdleSyncInteraction
        Context o-- CPLInteraction
        Context o-- SyncInteraction
        Context o-- SyncLoopInteraction
        Context o-- InProdInteraction
        Context o-right- Content
        Context o-right- Releases
        Context o-right- CIS
        Context o-right- CPL
        Context o-right- Sync
        Context o-right- SyncLoop

        class StateMachine #LightBlue {
            - FSM::Instance * _fsmInstance
            --
            + StateMachine(Context* context)
            + FSM::Instance * GetFSM()
            + Transition(StateEvent eventTrigger)
            + changeRelease(Control control, string compositeId)
        }
        StateMachine *-- Context
        StateMachine o-up- HSFM2
        StateEvent --o StateMachine
        class StateMachineManager <<Singleton>> #LightBlue {
            - static StateMachineManager* _instance
            - map<string, StateMachine*> _stateMachineMap 
            --
            + static StateMachineManager* GetInstance()
            + StateMachine* GetStateMachine(int id)
            + AddStateMachine(int id, StateMachine* stateMachine)
        }
        StateMachineManager o-up- StateMachine
        enum StateEvent #LightBlue

        struct TransitionResponse {
            + string cmdUUID
            + string cmdComment
            + string cmdStatus
            + string cmdDatasXML
        }
        struct StateTemplate  <<FSM::State>> #LightCyan {
            + TransitionResponse response
            --
            template <typename Event>
            + react(const Event&, EventControl&)
        }
        StateTemplate -up-o TransitionResponse 
        struct StateContentInit #LightCyan {
            + entryGuard(FullControl& control)
            + newContent(FullControl& control, string contentTitle)
            + react (const ContentInitEvent&, EventControl& control)
        }
        struct StatePublishing #LightCyan {
            + entryGuard(FullControl& control)
            + deleteRelease(Control control, string id_movie, string id_type, string id_localisation)
            + react (const CancelEvent&, EventControl& control)
            + react (const CreateReleaseEvent&, EventControl& control)
        }
        struct StateReleaseCreation #LightCyan {
            + entryGuard(FullControl& control)
            + newRelease(Control control, int id_movie, int id_type, int id_localisation, string cplRefPath)
            + react (const ReleaseCreatedEvent&, EventControl& control)
        }
        struct StateUploadCIS #LightCyan {
            + entryGuard(FullControl& control)
            + react (const PushCISEvent&, EventControl& control)
            + newCISFile(Control control, string cisPath)
        }
        struct StateSyncCreate #LightCyan {
            + enter(Control&)
        }
        struct StateIdleSync #LightCyan {
            + entryGuard(FullControl& control)
            + react (const CreateSyncEvent&, EventControl& control)
            + react (const CreateCPLEvent&, EventControl& control)
        }
        struct StateCPL #LightCyan {
            + entryGuard(FullControl& control)
            + react (const CreateSyncEvent&, EventControl& control)
            + newCPLFile(Control control, int id_serv_pair_config, string CPL_name, string CPL_uuid, string CPL_path)
        }
        struct StateSync #LightCyan {
            + entryGuard(FullControl& control)
            + react (const SyncCreatedEvent&, EventControl& control)
            + newSyncFile(Control control, string compositeId, string syncPath)
        }
        struct StateSyncLoop #LightCyan {
            + entryGuard(FullControl& control)
            + react (const SyncCreatedEvent&, EventControl& control)
            + newSyncLoop(Control control, string id_serv_pair_config, string syncLoopPath)
        }
        struct StateCancel #LightCyan {
            + enter(Control&)
        }
        struct StateInProd #LightCyan {
            + entryGuard(FullControl& control)
        }

        StateContentInit -up-|> StateTemplate
        StatePublishing -up-|> StateTemplate
        StateReleaseCreation -up-|> StateTemplate
        StateUploadCIS -up-|> StateTemplate
        StateSyncCreate -up-|> StateTemplate
        StateIdleSync -up-|> StateTemplate
        StateCPL -up-|> StateTemplate
        StateSync -up-|> StateTemplate
        StateSyncLoop -up-|> StateTemplate
        StateCancel -up-|> StateTemplate
        StateInProd -up-|> StateTemplate
        StateContentInit --* StateMachine
        StatePublishing --* StateMachine
        StateReleaseCreation --* StateMachine
        StateUploadCIS --* StateMachine
        StateSyncCreate --* StateMachine
        StateIdleSync --* StateMachine
        StateCPL --* StateMachine
        StateSync --* StateMachine
        StateSyncLoop --* StateMachine
        StateCancel --* StateMachine    
        StateInProd --* StateMachine
    }
    package Infra #LightGray {
        package HTTP #B0EBB4 {
            class HTTPInteraction {
                + TransitionResponse Run(string cmdUUID, map<string, string> Params)
                + Run()
                + Run(bool)
            }
            class HTTPInteraction <<abstract>> #LightGreen
            class HTTPContentInteraction {
                + TransitionResponse Run(string cmdUUID, map<string, string> Params)
                + Run()
            }
            class HTTPContentInteraction #LightGreen
            HTTPContentInteraction --|> HTTPInteraction
            HTTPContentInteraction -up-|> ContentInteraction #Green
            class HTTPPublishingInteraction {
                + TransitionResponse Run(string cmdUUID, map<string, string> Params)
                + Run()
                + Run(bool)
            }
            class HTTPPublishingInteraction #LightGreen
            HTTPPublishingInteraction --|> HTTPInteraction
            HTTPPublishingInteraction -up-|> PublishingInteraction #Green
            class HTTPReleaseInteraction {
                + TransitionResponse Run(string cmdUUID, map<string, string> Params)
                + Run()
            }
            class HTTPReleaseInteraction #LightGreen
            HTTPReleaseInteraction --|> HTTPInteraction
            HTTPReleaseInteraction -up-|> ReleaseInteraction #Green
            class HTTPCISInteraction {
                + TransitionResponse Run(string cmdUUID, map<string, string> Params)
                + Run()
            }
            class HTTPCISInteraction #LightGreen
            HTTPCISInteraction --|> HTTPInteraction
            HTTPCISInteraction -up-|> CISInteraction #Green
            class HTTPIdleSyncInteraction {
                + TransitionResponse Run(string cmdUUID, map<string, string> Params)
                + Run()
                + Run(bool)
            }
            class HTTPIdleSyncInteraction #LightGreen
            HTTPIdleSyncInteraction --|> HTTPInteraction
            HTTPIdleSyncInteraction -up-|> IdleSyncInteraction #Green
            class HTTPCPLInteraction {
                + TransitionResponse Run(string cmdUUID, map<string, string> Params)
                + Run()
            }
            class HTTPCPLInteraction #LightGreen
            HTTPCPLInteraction --|> HTTPInteraction
            HTTPCPLInteraction -up-|> CPLInteraction #Green
            class HTTPSyncInteraction {
                + TransitionResponse Run(string cmdUUID, map<string, string> Params)
                + Run()
            }
            class HTTPSyncInteraction #LightGreen
            HTTPSyncInteraction --|> HTTPInteraction
            HTTPSyncInteraction -up-|> SyncInteraction #Green
            class HTTPSyncLoopInteraction {
                + TransitionResponse Run(string cmdUUID, map<string, string> Params)
                + Run()
            }
            class HTTPSyncLoopInteraction #LightGreen
            HTTPSyncLoopInteraction --|> HTTPInteraction
            HTTPSyncLoopInteraction -up-|> SyncLoopInteraction #Green
            class HTTPInProdInteraction {
                + TransitionResponse Run(string cmdUUID, map<string, string> Params)
            }
            class HTTPInProdInteraction #LightGreen
            HTTPInProdInteraction --|> HTTPInteraction
            HTTPInProdInteraction -up-|> InProdInteraction #Green
        }
        package MySQL #F3D0D7 {
            class MySQLDBConnection #Pink {
                - DatabaseConnector* _database
                --
                + MySQLDBConnection(DatabaseConnector* database)
                + bool InitConnection()
                + ResultQuery* ExecuteQuery(Query* query)
            }
            MySQLDBConnection -up-|> Context #Red
            class MySQLContentRepo #Pink {
                - static string _database
                - static string _table

                - int* _id
                - string _title
                - Query* _query
                --
                + Create(Content* content)
                + Read(Content* content)
                + Update(Content* content)
                + Remove(Content* content)

                + Query* MySQLcreate(Content* content)
                + Query* MySQLread(Content* content)
                + Query* MySQLupdate(Content* content)
                + Query* MySQLremove(Content* content)
                
                + Query* GetQuery()
            }
            MySQLContentRepo -up-|> ContentRepo #Red
            class MySQLReleaseRepo #Pink {
                - static string _database
                - static string _table

                - int* _releaseIds
                - string _CPLRefPath

                - Query* _query
                --
                + Create(Releases* release)
                + Read(Releases* release)
                + Update(Releases* release)
                + Remove(Releases* release)

                + Query* MySQLcreate(Releases* release)
                + Query* MySQLread(Releases* release)
                + Query* MySQLupdate(Releases* release)
                + Query* MySQLremove(Releases* release)
            }
            MySQLReleaseRepo -up-|> ReleaseRepo #Red
            class MySQLCISRepo #Pink {
                - static string _database
                - static string _table

                - int* _CISids
                - string _pathCIS

                - Query* _query
                --
                + Create(CIS* cis)
                + Read(CIS* cis)
                + Update(CIS* cis)
                + Remove(CIS* cis)

                + Query* MySQLcreate(CIS* cis)
                + Query* MySQLread(CIS* cis)
                + Query* MySQLupdate(CIS* cis)
                + Query* MySQLremove(CIS* cis)

                + Query* GetQuery()
            }
            MySQLCISRepo -up-|> CISRepo #Red
            class MySQLCPLRepo #Pink {
                - static string _database
                - static string _table

                - int* _cplIds
                - string _uuid
                - string _name
                - string _cplPath

                - Query* _query
                --
                + Create(CPL* cpl)
                + Read(CPL* cpl)
                + Update(CPL* cpl)
                + Remove(CPL* cpl)

                + Query* MySQLcreate(CPL* cpl)
                + Query* MySQLread(CPL* cpl)
                + Query* MySQLupdate(CPL* cpl)
                + Query* MySQLremove(CPL* cpl)

                + Query* GetQuery()
            }
            MySQLCPLRepo -up-|> CPLRepo #Red
            class MySQLSyncRepo #Pink {
                - static string _database
                - static string _table

                - int* _syncId
                - string _syncPath

                - Query* _query
                --
                + Create(Sync* sync)
                + Read(Sync* sync)
                + Update(Sync* sync)
                + Remove(Sync* sync)

                + Query* MySQLcreate(Sync* sync)
                + Query* MySQLread(Sync* sync)
                + Query* MySQLupdate(Sync* sync)
                + Query* MySQLremove(Sync* sync)

                + Query* GetQuery()
            }
            MySQLSyncRepo -up-|> SyncRepo #Red
            class MySQLSyncLoopRepo #Pink {
                - static string _database
                - static string _table

                - int* _syncloopIds
                - string _syncLoopPath

                - Query* _query
                --
                + Create(SyncLoop* syncloop)
                + Read(SyncLoop* syncloop)
                + Update(SyncLoop* syncloop)
                + Remove(SyncLoop* syncloop)

                + Query* MySQLcreate(SyncLoop* syncloop)
                + Query* MySQLread(SyncLoop* syncloop)
                + Query* MySQLupdate(SyncLoop* syncloop)
                + Query* MySQLremove(SyncLoop* syncloop)

                + Query* GetQuery()
            }
            MySQLSyncLoopRepo -up-|> SyncLoopRepo #Red
        }
    }
}

package CENTRAL {
    class Configurator {
        - map<CommandCentral::CommandCentralType, HTTPInteraction*> _httpInteractions
        - Context* _context
        - StateMachine* _stateMachine
        - MySQLDBConnection* _dbConnection
        + FSM::Instance * fsmMachine
        --
        + Configurator(MySQLDBConnection* DBconnection)
        + map<CommandCentral::CommandCentralType, HTTPInteraction*> GetHTTPInteractions()
        + StateMachine* GetStateMachine()
    }
}

@enduml