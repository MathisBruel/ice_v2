@startuml Class Diagram WebCentral
title "Class Diagram WebCentral"
skinparam linetype polyline
skinparam linetype ortho
hide empty members

package Domain {
    class Content {
        - int _contentId
        - string _contentTitle
        - Releases* _release
        - ContentRepo* _contentRepo
        --
        + Content(string contentTitle)

        + CreateRelease(int id_movie, TypeMovie typeMovie, 
        LocalisationMovie localisationMovie)

        + SetDatas(int contentId, string _contentTitle)
        + SetRelease(Releases* release)

        + int* GetId()
        + string GetTitle()
        + Releases* GetRelease()
    }
    class ContentRepo {
        --
        + Create(Content* content)
        + Read(Content* content)
        + Update(Content* content)
        + Remove(Content* content)
    }
    class ContentRepo #LightYellow
    Content o-- ContentRepo #DarkGoldenRod
        class Releases {
        - int _releaseId[3]
        - string _CISPath
        - CIS* _cis
        - CPL* _cpl
        - SyncLoop* _syncLoop
        - ReleaseRepo* _releaseRepo
        --
        + UploadCIS(string cisPath)
        + UploadCPL(int id_serv_pair_config,
        string uuid, string name, string cplPath)
        + UploadSyncLoop(int id_serv_pair_config, 
        string syncLoopPath)

        + SetReleaseId(int id_movie, TypeMovie typeMovie, 
        LocalisationMovie localisationMovie)
        + SetReleaseInfos(string cisPath)
        + SetCIS(CIS* cis)
        + SetCPL(CPL* cpl)
        + SetSyncLoop(SyncLoop* syncLoop)

        + int* GetReleaseId()
        + string GetCISPath()
        + CIS* GetCIS()
        + CPL* GetCPL()
        + SyncLoop* GetSyncLoop()
    }
    Content o-- Releases #DarkGrey
    class ReleaseRepo {
        --
        + Create(Releases* release)
        + Read(Releases* release)
        + Update(Releases* release)
        + Remove(Releases* release)
    }
    class ReleaseRepo #LightYellow
    Releases o-- ReleaseRepo #DarkGoldenRod
    class CIS {
        - int _CISId[3]
        - string _CISPath
        - CISRepo* _CISRepo
        --
        + SetCISId(int id_movie, int id_type, 
        int id_localisation)
        + SetCISInfos(string CISPath)

        + int* GetCISId()
        + string GetCISPath()
    }
    Releases o-- CIS #DarkGrey
    class CISRepo {
        --
        + Create(CIS* cis)
        + Read(CIS* cis)
        + Update(CIS* cis)
        + Remove(CIS* cis)
    }
    class CISRepo #LightYellow
    CIS o-- CISRepo #DarkGoldenRod
    class CPL {
        - int _CPLId[4]
        - string _CPLUUID
        - string _CPLName
        - string _CPLPath
        - CPLRepo* _cplRepo
        - Sync* _sync
        --
        + CreateSync(string SyncPath)

        + SetCPLId(int id_serv_pair_config, int id_movie, 
        int id_type, int id_localisation)
        + SetDatas(string CPLUUID, string CPLName)
        + SetCplInfos(string CPLPath)

        + int* GetCPLId()
        + string GetCPLUUID()
        + string GetCPL_CPLName()
        + string GetCPLPath()
        + Sync* GetSync()
    }
    Releases o-- CPL #DarkGrey
    class CPLRepo {
        --
        + Create(CPL* cpl)
        + Read(CPL* cpl)
        + Update(CPL* cpl)
        + Remove(CPL* cpl)
    }
    class CPLRepo #LightYellow
    CPL o-- CPLRepo #DarkGoldenRod 
    class Sync {
        - int _syncId[4]
        - string _syncPath
        - SyncRepo* _syncRepo
        --
        + SetSyncId(int id_serv_pair_config, int id_movie, 
        int id_type, int id_localisation)
        + SetSyncInfos(string SyncPath)

        + int* GetSyncID()
        + string GetSyncPath()
    }
    CPL o-- Sync #DarkGrey
    class SyncRepo {
        --
        + Create(Sync* sync)
        + Read(Sync* sync)
        + Update(Sync* sync)
        + Remove(Sync* sync)
    }
    class SyncRepo #LightYellow
    Sync o-- SyncRepo #DarkGoldenRod 
    class SyncLoop {
        - int _syncLoopId[4]
        - string _SyncLoopPath
        - SyncLoopRepo* syncLoopRepo
        --
        + SetID(int id_serv_pair_config, int id_movie,
        int id_type, int id_localisation)
        + SetSyncLoopInfos(string SyncLoopPath)

        + int* getID()
        + string getSyncLoopPath()
    }
    Releases o-- SyncLoop #DarkGrey
    class SyncLoopRepo {
        --
        + Create(SyncLoop* syncloop)
        + Read(SyncLoop* syncloop)
        + Update(SyncLoop* syncloop)
        + Remove(SyncLoop* syncloop)
    }
    class SyncLoopRepo #LightYellow
    SyncLoop o-- SyncLoopRepo #DarkGoldenRod 
    enum TypeMovie
    Releases o-up- TypeMovie #DarkGrey
    enum LocalisationMovie
    Releases o-up- LocalisationMovie #DarkGrey
}
package App {
    abstract StateTemplate <<HFSM2>> {
        + FullControl* stateControl
    }

    abstract StateTemplate <<HFSM2>> #LightCyan
    struct StateIdle{
        --
        entryGuard(FullControl& control)
        enter()
        Transition()
    }
    struct StateIdle <<HFSM2>> #LightBlue
    StateTemplate <|-- StateIdle #DarkCyan
    class IdleInteraction {
        + function<void()> pfTransition
    }
    class IdleInteraction #lightgrey
    StateIdle --o IdleInteraction #DarkBlue

    struct StateContentInit {
        --
        entryGuard(FullControl& control)
        enter()
        Transition()
    }
    struct StateContentInit <<HFSM2>> #LightBlue
    StateTemplate <|-- StateContentInit #DarkCyan
    StateContentInit o-- Content #Blue;text:Blue; : To Create Release 
    class ContentInteraction {
        + function<void()> pfTransition
    }
    class ContentInteraction #lightgrey
    StateContentInit --o ContentInteraction #DarkBlue

    struct StateReleaseCreation {
        --
        entryGuard(FullControl& control)
        enter()
        Transition()
    }
    struct StateReleaseCreation <<HFSM2>> #LightBlue
    StateTemplate <|-- StateReleaseCreation #DarkCyan
    StateReleaseCreation o-- Content #Blue;text:Blue; : Create Release
    class ReleaseInteraction {
        + function<void()> pfTransition
    }
    class ReleaseInteraction #lightgrey
    StateReleaseCreation --o ReleaseInteraction #DarkBlue

    struct StatePublishing {
        --
        entryGuard(FullControl& control)
        enter()
        Transition()
    }
    struct StatePublishing <<HFSM2>> #LightBlue
    StateTemplate <|-- StatePublishing #DarkCyan
    class PublishingInteraction {
        + function<void()> pfTransition
    }
    class PublishingInteraction #lightgrey
    StatePublishing --o PublishingInteraction #DarkBlue
    StatePublishing o-- CIS #Blue;text:Blue; :Publish
    StatePublishing o-- Sync #Blue;text:Blue; :Publish
    StatePublishing o-- SyncLoop #Blue;text:Blue; :Publish

    struct StateUploadCIS {
        --
        entryGuard(FullControl& control)
        enter()
        Transition()
    }
    struct StateUploadCIS <<HFSM2>> #LightBlue
    StateTemplate <|-- StateUploadCIS #DarkCyan  
    StateUploadCIS o-- Releases #Blue;text:Blue; : Upload CIS
    class CISInteraction {
        + function<void()> pfTransition
    }
    class CISInteraction #lightgrey
    StateUploadCIS --o CISInteraction #DarkBlue

    struct StateSyncCreate {
        --
        enter()
    }
    struct StateSyncCreate <<HFSM2>> #LightBlue
    StateTemplate <|-- StateSyncCreate #DarkCyan
    struct StateIdleSync {
        --
        entryGuard(FullControl& control)
        enter()
        TransitionToCPL()
        TransitionToSYNCLOOP()
    }
    struct StateIdleSync <<HFSM2>> #LightBlue
    StateTemplate <|-- StateIdleSync #DarkCyan
    class IdleSyncInteraction {
        + function<void()> pfTransitionToCPL
        + function<void()> pfTransitionToSYNCLOOP
    }
    class IdleSyncInteraction #lightgrey
    StateIdleSync --o IdleSyncInteraction #DarkBlue

    struct StateCPL {
        --
        entryGuard(FullControl& control)
        enter()
        Transition()
    }
    struct StateCPL <<HFSM2>> #LightBlue
    StateTemplate <|-- StateCPL #DarkCyan
    StateCPL o-- CPL #Blue;text:Blue; : Create CPL
    class CPLInteraction {
        + function<void()> pfTransition
    }
    class CPLInteraction #lightgrey
    StateCPL --o CPLInteraction #DarkBlue

    struct StateSync {
        --
        entryGuard(FullControl& control)
        enter()
        Transition()
    }
    struct StateSync <<HFSM2>> #LightBlue
    StateTemplate <|-- StateSync #DarkCyan
    StateSync o-- Sync #Blue;text:Blue; : Create Sync
    class SyncInteraction {
        + function<void()> pfTransition
    }
    class SyncInteraction #lightgrey
    StateSync --o SyncInteraction #DarkBlue

    struct StateSyncLoop {
        --
        entryGuard(FullControl& control)
        enter()
        Transition()
    }
    struct StateSyncLoop <<HFSM2>> #LightBlue
    StateTemplate <|-- StateSyncLoop #DarkCyan
    StateSyncLoop o-- Releases #Blue;text:Blue; : Create SyncLoop
    class SyncLoopInteraction {
        + function<void()> pfTransition
    }
    class SyncLoopInteraction #lightgrey
    StateSyncLoop --o SyncLoopInteraction #DarkBlue

    ' struct StateCancel {
    '     --
    '     entryGuard(FullControl& control)
    '     enter()
    '     Transition()
    ' }
    ' struct StateCancel <<HFSM2>> #LightBlue
    ' StateTemplate <|-- StateCancel #DarkCyan
    ' class CancelInteraction #lightgrey
    ' StateCancel --o CancelInteraction #DarkBlue

    struct StateInProd {
        --
        entryGuard(FullControl& control)
        enter()
        Transition()
    }
    struct StateInProd <<HFSM2>> #LightBlue
    StateTemplate <|-- StateInProd #DarkCyan
    class InProdInteraction {
        + function<void()> pfTransition
    }
    class InProdInteraction #lightgrey
    StateInProd --o InProdInteraction #DarkBlue
}
package Infrastructure {
    package Infrastructure::MySQL{
        class MySQLContentRepo {
            - string _database
            - string _table
            --
            + Query* MySQLcreate(Content* content)
            + Query* MySQLread(Content* content)
            + Query* MySQLupdate(Content* content) 
            + Query* MySQLremove(Content* content)
        }
        class MySQLContentRepo #LightPink
        ContentRepo <|-- MySQLContentRepo #Red
        class MySQLReleaseRepo {
            - string _database
            - string _table
            --
            + Query* MySQLcreate(Releases* release)
            + Query* MySQLread(Releases* release)
            + Query* MySQLupdate(Releases* release)
            + Query* MySQLremove(Releases* release)
        }
        class MySQLReleaseRepo #LightPink
        ReleaseRepo <|-- MySQLReleaseRepo #Red
        class MySQLCISRepo {
            - string _database
            - string _table
            --
            + Query* MySQLcreate(CIS* cis)
            + Query* MySQLread(CIS* cis)
            + Query* MySQLupdate(CIS* cis)
            + Query* MySQLremove(CIS* cis)
        }
        class MySQLCISRepo #LightPink
        CISRepo <|-- MySQLCISRepo #Red
        class MySQLCPLRepo {
            - string _database
            - string _table
            --
            + Query* MySQLcreate(CPL* cpl)
            + Query* MySQLread(CPL* cpl)
            + Query* MySQLupdate(CPL* cpl)
            + Query* MySQLremove(CPL* cpl)
        }
        class MySQLCPLRepo #LightPink
        CPLRepo <|-- MySQLCPLRepo #Red
        class MySQLSyncRepo {
            - string _database
            - string _table
            --
            + Query* MySQLcreate(CPL* cpl)
            + Query* MySQLread(CPL* cpl)
            + Query* MySQLupdate(CPL* cpl)
            + Query* MySQLremove(CPL* cpl)
        }
        class MySQLSyncRepo #LightPink
        SyncRepo <|-- MySQLSyncRepo #Red
        class MySQLSyncLoopRepo {
            - string _database
            - string _table
            --
            + Query* MySQLcreate(SyncLoop* syncloop)
            + Query* MySQLread(SyncLoop* syncloop)
            + Query* MySQLupdate(SyncLoop* syncloop)
            + Query* MySQLremove(SyncLoop* syncloop)
        }
        class MySQLSyncLoopRepo #LightPink
        SyncLoopRepo <|-- MySQLSyncLoopRepo #Red
        class MySQLDBConnection {
            - _DatabaseConnector* _database
            --
            + bool InitConnection()
            + ResultQuery* ExecuteQuery(Query* query)
        }
        class MySQLDBConnection #LightPink
        MySQLContentRepo o-- MySQLDBConnection #Red
        MySQLReleaseRepo o-- MySQLDBConnection #Red
        MySQLCISRepo o-- MySQLDBConnection #Red
        MySQLCPLRepo o-- MySQLDBConnection #Red
        MySQLSyncRepo o-- MySQLDBConnection #Red
        MySQLSyncLoopRepo o-- MySQLDBConnection #Red
    }
    package Infrastructure::HTTP {
        interface HTTPInteraction {
            --
            + run()
        }
        class HTTPIdleInteraction {
            --
            + run()
        }
        class HTTPIdleInteraction #LightGreen
        IdleInteraction <|-- HTTPIdleInteraction #Green
        HTTPIdleInteraction --|> HTTPInteraction
        class HTTPContentInteraction {
            --
            + run()
        }
        class HTTPContentInteraction #LightGreen
        ContentInteraction <|-- HTTPContentInteraction #Green
        HTTPContentInteraction --|> HTTPInteraction
        class HTTPReleaseInteraction {
            --
            + run()
        }
        class HTTPReleaseInteraction #LightGreen
        ReleaseInteraction <|-- HTTPReleaseInteraction #Green
        HTTPReleaseInteraction --|> HTTPInteraction
        class HTTPCISInteraction {
            --
            + run()
        }
        class HTTPCISInteraction #LightGreen
        CISInteraction <|-- HTTPCISInteraction #Green
        HTTPCISInteraction --|> HTTPInteraction
        class HTTPIdleSyncInteraction {
            - bool _syncLoop 
            --
            + SetSyncLoop(bool SyncLoop)

            + run()
        }
        class HTTPIdleSyncInteraction #LightGreen
        IdleSyncInteraction <|-- HTTPIdleSyncInteraction #Green
        HTTPIdleSyncInteraction --|> HTTPInteraction
        class HTTPCPLInteraction {
            --
            + run()
        }
        class HTTPCPLInteraction #LightGreen
        CPLInteraction <|-- HTTPCPLInteraction #Green
        HTTPCPLInteraction --|> HTTPInteraction
        class HTTPSyncInteraction {
            --
            + run()
        }
        class HTTPSyncInteraction #LightGreen
        SyncInteraction <|-- HTTPSyncInteraction #Green 
        HTTPSyncInteraction --|> HTTPInteraction
        class HTTPSyncLoopInteraction {
            --
            + run()
        }
        class HTTPSyncLoopInteraction #LightGreen
        SyncLoopInteraction <|-- HTTPSyncLoopInteraction #Green
        HTTPSyncLoopInteraction --|> HTTPInteraction
        class HTTPPublishingInteraction {
            --
            + run()
        }
        class HTTPPublishingInteraction #LightGreen
        PublishingInteraction <|-- HTTPPublishingInteraction #Green
        HTTPPublishingInteraction --|> HTTPInteraction
        class HTTPInProdInteraction {
            --
            + run()
        }
        class HTTPInProdInteraction #LightGreen
        InProdInteraction <|-- HTTPInProdInteraction #Green
        HTTPInProdInteraction --|> HTTPInteraction
        ' class HTTPCancelInteraction {
        '     --
        '     + run()
        ' }
        ' class HTTPCancelInteraction #LightGreen
        ' CancelInteraction <|-- HTTPCancelInteraction #Green
        ' HTTPCancelInteraction --|> HTTPInteraction
    }
}
@enduml