<%- include ("../head") %>
<%- include ("../navigation") %>

<div class="block" id="group">
    <h1>GROUP</h1>

    <ul class="list" id="controls">
        <li>
            <img class="image-line-add" id="create" src="/add.png"/>
            <img class="image-line-add" id="update" src="/save.png"/>
            <img class="image-line-add" id="delete" src="/remove.png"/>
        </li>
    </ul>

    <h2>General</h2>

    <ul class="list" id="list-general">
        <li class="list-item-general">
            <img class="image-line-param" src="/control.png"/>
            <div class="param">Name</div>
            <input type="text" id="name">
        </li>
        <li class="list-item-general">
            <img class="image-line-param" src="/control.png"/>
            <div class="param">Groupe parent</div>
            <select id="parent-group"></select>
        </li>
    </ul>

    <h2 id="title-sites">Sites</h2>
    <ul class="list" id="list-sites"></ul>

    <h2 id="title-releases">Releases</h2>
    <ul class="list" id="list-releases"></ul>

    <div id="message-box" class="success"></div>
</div>

<script type="text/javascript">

    const queryString = window.location.search;
    const urlParams = new URLSearchParams(queryString);
    const id = urlParams.get('id');

    const listSites = document.getElementById("list-sites");
    const listReleases = document.getElementById("list-releases");
    const parentGroupSelect = document.getElementById("parent-group");

    // -- load sites at init of page
    document.addEventListener('DOMContentLoaded', async function(){

        // Charger la liste des groupes pour le select parent ET trouver le groupe courant
        const optionsGroups = { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ id_group: -1 }) };
        const allGroupsResp = await fetch('/getGroupsFilter', optionsGroups);
        let allGroups = [];
        let currentGroup = null;
        if (allGroupsResp.ok) {
            const allGroupsData = await allGroupsResp.json();
            if (allGroupsData.ok && allGroupsData.data && allGroupsData.data.groups && allGroupsData.data.groups.group) {
                allGroups = allGroupsData.data.groups.group;
                if (id != -1) {
                    currentGroup = allGroups.find(g => g.$.id_group == id);
                }
            }
        }

        // Remplir le select
        parentGroupSelect.innerHTML = '';
        const defaultOption = document.createElement('option');
        defaultOption.value = -1;
        defaultOption.innerText = 'Aucun (racine)';
        parentGroupSelect.appendChild(defaultOption);
        allGroups.forEach(g => {
            if (g.$.id_group != id) { // ne pas pouvoir se mettre parent de soi-même
                const opt = document.createElement('option');
                opt.value = g.$.id_group;
                opt.innerText = g.$.name;
                parentGroupSelect.appendChild(opt);
            }
        });

        if (id != -1) {
            document.getElementById("create").style.display = "none";
            // Utiliser le groupe courant trouvé dans la liste
            if (currentGroup) {
                document.getElementById("name").value = currentGroup.$.name;
                if (currentGroup.$.id_group_1) {
                    parentGroupSelect.value = currentGroup.$.id_group_1;
                } else {
                    parentGroupSelect.value = -1;
                }
            } else {
                showErrorMessage("message-box", "Aucun groupe trouvé ou erreur de récupération.");
                document.getElementById("name").value = "";
                parentGroupSelect.value = -1;
            }

            // Les requêtes pour les cinémas et releases restent inchangées
            const jsonSites = {id_group: id};
            const optionsSites = { method:"POST", headers:{ "Content-Type": "application/json "}, body:JSON.stringify(jsonSites) };
            const resultSites = await (await fetch(`/getSites`, optionsSites)).json();
            console.log(resultSites);
            const jsonReleases = {id: -1};
            const optionsReleases = { method:"POST", headers:{ "Content-Type": "application/json "}, body:JSON.stringify(jsonReleases) };
            const resultReleases = await (await fetch(`/getReleases`, optionsReleases)).json();

            // -- sites list
            var listSiteData = [];
            if (resultSites.data.sites) {
                if (resultSites.data.sites.site.length > 0) {
                    resultSites.data.sites.site.forEach(site => {
                        if (currentGroup.sites && currentGroup.sites.length > 0 && currentGroup.sites[0] != "") {

                            var found = false;
                            currentGroup.sites[0].site.forEach(siteGroup => {
                                if (site.$.id == siteGroup.$.id) {
                                    found = true;
                                }
                            });

                            if (!found) {
                                listSiteData.push({id: site.$.id, name: site.$.name});
                            }
                        }
                        else {
                            listSiteData.push({id: site.$.id, name: site.$.name});
                        }
                    });
                }
                if (listSiteData.length > 0) {
                    const li = createDOM("li", {className:"list-item-add"});
                    listSites.appendChild(li);
                    const drop = createDOM("select", { className:"drop", id:"dropSites"});
                    li.appendChild(drop);
                    listSiteData.forEach(siteToAdd => {
                        const select = createDOM("option", {value: siteToAdd.id, innerText: siteToAdd.name});
                        drop.appendChild(select);
                    });
                    const imgAdd = createDOM("img", { id:"addSite", className:"image-line-add", src:"/add.png" });
                    imgAdd.addEventListener('click', async function(){

                        const jsonLinkSite = {
                            id_site: document.getElementById("dropSites").value,
                            id_group: id
                        };
                        const optionsLinkSite = { method:"POST", headers:{ "Content-Type": "application/json "}, body:JSON.stringify(jsonLinkSite) };
                        const resultLinkSite = await fetch(`/linkSiteToGroup`, optionsLinkSite);
                        console.log(resultLinkSite);
                        if (resultLinkSite.ok == true) {
                            const body = await resultLinkSite.json();
                            if (body.code == 200) {
                                window.location.reload();
                            }
                            else {
                                showErrorMessage("message-box", body.message);
                            }
                        }
                        else {
                            showErrorMessage("message-box", resultLinkSite.message);
                        }
                    });
                    li.appendChild(imgAdd);
                    li.appendChild(drop);
                }
            }

            // -- sites
            listSites.innerHTML = '';
            if (resultSites.data.sites && resultSites.data.sites.site.length > 0) {
                resultSites.data.sites.site.forEach(site => {
                    const li = createDOM("li", {className:"list-item"});
                    listSites.appendChild(li);
                    li.style.cursor = "pointer";
                    li.addEventListener('click', function() {
                        window.location.assign("/sites?id_group=" + site.$.id_group);
                    });
                    const imgName = createDOM("img", { className:"image-line", src:"/cinema.png" });
                    const name = createDOM("div", { className:"param", innerText: site.$.name });
                    li.appendChild(imgName);
                    li.appendChild(name);
                });
            } else {
                const li = createDOM("li", {className:"list-item-none"});
                listSites.appendChild(li);
                const imgName = createDOM("img", { className:"image-line", src:"/cinema.png" });
                const name = createDOM("div", { className:"param", innerText:"NONE" });
                li.appendChild(imgName);
                li.appendChild(name);
            }

            // -- releases list
            var listReleaseData = [];
            if (resultReleases.data.releases) {
                if (resultReleases.data.releases.release.length > 0) {
                    resultReleases.data.releases.release.forEach(release => {
                        if (currentGroup.releases && currentGroup.releases.length > 0 && currentGroup.releases[0] != "") {

                            var found = false;
                            currentGroup.releases[0].release.forEach(releaseGroup => {
                                if (release.$.id == releaseGroup.$.id) {
                                    found = true;
                                }
                            });

                            if (!found) {
                                listReleaseData.push({id: release.$.id, name: release.$.name});
                            }
                        }
                        else {
                            listReleaseData.push({id: release.$.id, name: release.$.name});
                        }
                    });
                }
                if (listReleaseData.length > 0) {
                    const li = createDOM("li", {className:"list-item-add"});
                    listReleases.appendChild(li);
                    const drop = createDOM("select", { className:"drop", id:"dropReleases"});
                    li.appendChild(drop);
                    listReleaseData.forEach(releaseToAdd => {
                        const select = createDOM("option", {value: releaseToAdd.id, innerText: releaseToAdd.name});
                        drop.appendChild(select);
                    });
                    const imgAdd = createDOM("img", { id:"addRelease", className:"image-line-add", src:"/add.png" });
                    imgAdd.addEventListener('click', async function(){

                        const jsonLinkRelease = {
                            id_release: document.getElementById("dropReleases").value,
                            id_group: id
                        };
                        const optionsLinkRelease = { method:"POST", headers:{ "Content-Type": "application/json "}, body:JSON.stringify(jsonLinkRelease) };
                        const resultLinkRelease = await fetch(`/linkReleaseToGroup`, optionsLinkRelease);
                        console.log(resultLinkRelease);
                        if (resultLinkRelease.ok == true) {
                            const body = await resultLinkRelease.json();
                            if (body.code == 200) {
                                window.location.reload();
                            }
                            else {
                                showErrorMessage("message-box", body.message);
                            }
                        }
                        else {
                            showErrorMessage("message-box", resultLinkContent.message);
                        }
                    });
                    li.appendChild(imgAdd);
                    li.appendChild(drop);
                }
            }

            // -- releases
            if (currentGroup.releases && currentGroup.releases.length > 0 && currentGroup.releases[0] != "") {
                currentGroup.releases[0].release.forEach(release => {
                    const li = createDOM("li", {className:"list-item"});
                    listReleases.appendChild(li);
                    const imgName = createDOM("img", { className:"image-line", src:"/release.png" });
                    imgName.addEventListener('click', async function(){
                        window.location.assign("/release?id=" + release.$.id);
                    });
                    const name = createDOM("div", { className:"param", innerText: release.$.name });
                    const imgDelete = createDOM("img", { className:"image-line-add", src:"/remove.png", id:release.$.id });
                    imgDelete.addEventListener('click', async function(){

                        const jsonUnlinkRelease = {
                            id_release: this.id,
                            id_group: id
                        };
                        const optionsUnlinkRelease = { method:"POST", headers:{ "Content-Type": "application/json "}, body:JSON.stringify(jsonUnlinkRelease) };
                        const resultUnlinkRelease = await fetch(`/unlinkReleaseToGroup`, optionsUnlinkRelease);
                        console.log(resultUnlinkRelease);
                        if (resultUnlinkRelease.ok == true) {
                            const body = await resultUnlinkRelease.json();
                            if (body.code == 200) {
                                window.location.reload();
                            }
                            else {
                                showErrorMessage("message-box", body.message);
                            }
                        }
                        else {
                            showErrorMessage("message-box", resultUnlinkRelease.message);
                        }
                    });
                    li.appendChild(imgName);
                    li.appendChild(name);
                    li.appendChild(imgDelete);
                });
            }
            else {
                const li = createDOM("li", {className:"list-item-none"});
                listReleases.appendChild(li);
                const imgName = createDOM("img", { className:"image-line", src:"/release.png", title:"none" });
                const name = createDOM("div", { className:"param", innerText:"NONE" });
                li.appendChild(imgName);
                li.appendChild(name);
            }
        }
        else {
            document.getElementById("title-sites").style.display = "none";
            document.getElementById("title-releases").style.display = "none";
            document.getElementById("list-sites").style.display = "none";
            document.getElementById("list-releases").style.display = "none";
            document.getElementById("update").style.display = "none";
            document.getElementById("delete").style.display = "none";
        }
    });

    document.getElementById("create").addEventListener('click', async function(){

        const name = document.getElementById("name").value;
        const description = document.getElementById("description").value;

        if (name == "") {
            document.getElementById("name").style.backgroundColor = "red";
            showErrorMessage("message-box", "Field name is empty !");
        }
        else if (description == "") {
            document.getElementById("description").style.backgroundColor = "red";
            showErrorMessage("message-box", "Field description is empty !");
        }

        else {
            const json = {
                name: name,
                description: description
            };
            const options = { method:"POST", headers:{ "Content-Type": "application/json "}, body:JSON.stringify(json) };
            const result = await fetch(`/createGroup`, options);
            console.log(result);
            if (result.ok == true) {
                const body = await result.json();
                if (body.code == 200) {
                    window.location.assign("/groups");
                }
                else {
                    showErrorMessage("message-box", body.message);
                }
            }
            else {
                showErrorMessage("message-box", result.message);
            }
        }
    });

    document.getElementById("update").addEventListener('click', async function(){

        const name = document.getElementById("name").value;
        const description = document.getElementById("description").value;

        if (name == "") {
            document.getElementById("name").style.backgroundColor = "red";
            showErrorMessage("message-box", "Field name is empty !");
        }
        else if (description == "") {
            document.getElementById("description").style.backgroundColor = "red";
            showErrorMessage("message-box", "Field description is empty !");
        }

        else {
            const json = {
                id: id,
                name: name,
                description: description
            };
            const options = { method:"POST", headers:{ "Content-Type": "application/json "}, body:JSON.stringify(json) };
            const result = await fetch(`/updateGroup`, options);
            console.log(result);
            if (result.ok == true) {
                const body = await result.json();
                if (body.ok == true) {
                    window.location.assign("/groups");
                }
                else {
                    showErrorMessage("message-box", body.message);
                }
            }
            else {
                showErrorMessage("message-box", result.message);
            }
        }
    });

    document.getElementById("delete").addEventListener('click', async function(){

        const json = {
            id: id
        };
        const options = { method:"POST", headers:{ "Content-Type": "application/json "}, body:JSON.stringify(json) };
        const result = await fetch(`/deleteGroup`, options);
        console.log(result);
        if (result.ok == true) {
            const body = await result.json();
            if (body.code == 200) {
                window.location.assign("/groups");
            }
            else {
                showErrorMessage("message-box", body.message);
            }
        }
        else {
            showErrorMessage("message-box", result.message);
        }
    });

</script>

<%- include ("../foot") %>