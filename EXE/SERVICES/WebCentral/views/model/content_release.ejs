<%- include ("../head") %>
<%- include ("../navigation") %>

<div class="block" id="release">
    <h1>Release n°<p style="display: inline;" id="releaseNum"></p></h1>
    <h2>État Actuel</h2>
    <div class="ul-model" id="stateBox" style="display: flex; width: 90%; margin: 0 2%; padding: 10px;">
        <div class="BlockLabel">
            <label for="currentState">État de la Release</label>
            <input type="text" id="currentState" readonly 
                   style="font-weight: bold; background-color: #e9e9e9; width: 100%; min-width: 180px; max-width: 100%; box-sizing: border-box;"/>
        </div>
    </div>
    <h2>Info</h2>
    <div class="ul-model" id="infoBox" style="display: flex; width: 90%; margin: 0 2%;">
        <div class="BlockLabel">
            <label for="title">Titre</label>
            <input type="text" id="title" readonly/>
        </div>
        <div class="BlockLabel">
            <label for="type">Type</label>
            <input type="text" id="type" readonly/>
        </div>
        <div class="BlockLabel">
            <label for="Localisation">Localisation</label>
            <input type="text" id="Localisation" readonly/>
        </div>
        <div class="BlockLabel">
            <label for="cplRefPath">CPL ref path</label>
            <input type="text" id="cplRefPath" readonly/>
        </div>
    </div>
    <h2>CIS</h2>
    <div class="ul-model" id="cisBox" style="display: flex; width: 90%; margin: 0 2%;"></div>
    <h2>SyncLoop</h2>
    <div class="ul-model" id="syncLoopBox" style="display: flex; width: 90%; margin: 0 2%;"></div>
    <h2>CPLs</h2>
    <div class="ul-model" id="cplContent"></div>
    <div id="message-box" class="success"></div>
</div>

<script>
    let contentLocalisation = {};
    let contentType = {};
    
    const queryString = window.location.search;
    const urlParams = new URLSearchParams(queryString);
    const id_content = urlParams.get('id_content');
    const id_type = urlParams.get('id_type');
    const id_localisation = urlParams.get('id_localisation');
    let contentTitle = "";
    
    document.addEventListener('DOMContentLoaded', async function(){
        await loadLocalisations();
        await loadTypes();
        await loadContent();
        
        if (id_content == null || id_type == null || id_localisation == null) { window.location.assign("/movies"); }
        const numRelease = document.getElementById("releaseNum");
        numRelease.innerHTML = id_content + "-" + id_type + "-" + id_localisation;
        const inputType = document.getElementById("type");
        inputType.value = getTypeName(id_type, null);
        const inputLocalisation = document.getElementById("Localisation");
        inputLocalisation.value = getLocalisationName(id_localisation, null);
        const inputTitle = document.getElementById("title");
        inputTitle.value = contentTitle;
        const json = { id_content: id_content, id_type: id_type, id_localisation: id_localisation };
        const options = { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(json) };
        let response = await (await fetch(`/getReleasesContent`, options)).json();
        if (response.ok == true) {
            let releaseData = null;
            if (response.data.release) {
                releaseData = response.data.release;
            } else if (response.data.releases && response.data.releases.release) {
                releaseData = response.data.releases.release[0];
            }
            if (releaseData) {
                const inputCurrentState = document.getElementById("currentState");
                if (releaseData.$.state) {
                    inputCurrentState.value = releaseData.$.state;
                } else {
                    inputCurrentState.value = "Non disponible";
                }
                
                const infoBox = document.getElementById("infoBox");
                const updateImg = createDOM("img", {class:"image-line-add", src:"/add.png", id:"update"});
                updateImg.addEventListener("click", async function(){
                    const release_cpl_ref_path = document.getElementById("cplRefPath");
                    showErrorMessage("message-box", "Functionalities not implemented yet");
                    return;
                    if (release_cpl_ref_path.value == "") { 
                        release_cpl_ref_path.style.backgroundColor = "red";
                        showErrorMessage("message-box", "Content is empty");
                    }
                    else if (release_cpl_ref_path.value == releaseData.$.release_cpl_ref_path) {
                        release_cpl_ref_path.style.backgroundColor = "orange";
                        showErrorMessage("message-box", "No changes detected");
                    }
                    else {
                        const json = { id_content: id_content, id_type: id_type, id_localisation: id_localisation, release_cpl_ref_path: release_cpl_ref_path.value };
                        const options = { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(json) };
                        let response = await (await fetch(`/updateReleases`, options)).json();
                        if (response.ok == true) {
                            const body = await response.json();
                            if (body.code == 200) { 
                                window.location.reload();
                            }
                            else {
                                showErrorMessage("message-box", body.message);
                            }
                        }
                        else {
                            showErrorMessage("message-box", response.message);
                        }
                    }
                });
                infoBox.appendChild(updateImg);
                const inputIdMovie = document.getElementById("cplRefPath");
                inputIdMovie.value = releaseData.$.release_cpl_ref_path;

                // CIS (lecture seule, champ vide si NULL, bouton d'ajout si vide)
                const cisBox = document.getElementById("cisBox");
                const containerCis = createDOM("div", { class: "BlockLabel", style:"width: 25%;" });
                const labelCis = createDOM("label", { for: "cisPath" });
                labelCis.innerHTML = "CIS Path";
                let cispathValue = releaseData.$.release_cis_path;
                const inputCisPath = createDOM("input", { type: "text", id: "cisPath" });
                inputCisPath.value = (cispathValue && cispathValue !== "NULL") ? cispathValue : "";
                containerCis.appendChild(labelCis);
                containerCis.appendChild(inputCisPath);
                cisBox.appendChild(containerCis);
                if (!cispathValue || cispathValue === "NULL") {
                    const createImgCIS = createDOM("img", {class:"image-line-add", src:"/add.png", id:"createCIS"});
                    cisBox.appendChild(createImgCIS);
                    createImgCIS.addEventListener("click", async function(){
                        if (inputCisPath.value == "") {
                            inputCisPath.style.backgroundColor = "red";
                            showErrorMessage("message-box", "Content is empty");
                        } else {
                            const json = { id_content: id_content, id_type: id_type, id_localisation: id_localisation, release_cis_path: inputCisPath.value };
                            const options = { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(json) };
                            let response = await fetch(`/createCIS`, options);
                            if (response.ok == true) {
                                const body = await response.json();
                                if (body.code == 200) { 
                                    window.location.reload();
                                } else {
                                    showErrorMessage("message-box", body.message);
                                }
                            } else {
                                showErrorMessage("message-box", response.message);
                            }
                        }
                    });
                } else {
                    inputCisPath.readOnly = true;
                }

                const syncLoopBox = document.getElementById("syncLoopBox");
                const containerSyncLoop = createDOM("div", { class: "BlockLabel", style:"width: 25%;" });
                const labelSyncLoop = createDOM("label", { for: "syncLoopPath" });
                labelSyncLoop.innerHTML = "SyncLoop Path";
                let syncLoopValue = releaseData.$.release_syncloop_path;
                const inputSyncLoopPath = createDOM("input", { type: "text", id: "syncLoopPath" });
                inputSyncLoopPath.value = (syncLoopValue && syncLoopValue !== "NULL") ? syncLoopValue : "";
                containerSyncLoop.appendChild(labelSyncLoop);
                containerSyncLoop.appendChild(inputSyncLoopPath);
                syncLoopBox.appendChild(containerSyncLoop);
                if (!syncLoopValue || syncLoopValue === "NULL") {
                    const createImgSyncLoop = createDOM("img", {class:"image-line-add", src:"/add.png", id:"createSyncLoop"});
                    syncLoopBox.appendChild(createImgSyncLoop);
                    createImgSyncLoop.addEventListener("click", async function(){
                        if (inputSyncLoopPath.value == "") {
                            inputSyncLoopPath.style.backgroundColor = "red";
                            showErrorMessage("message-box", "Content is empty");
                        } else {
                            const json = { id_content: id_content, id_type: id_type, id_localisation: id_localisation, syncloop_path: inputSyncLoopPath.value };
                            const options = { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(json) };
                            let response = await fetch(`/createSyncLoop`, options);
                            if (response.ok == true) {
                                const body = await response.json();
                                if (body.code == 200) { 
                                    window.location.reload();
                                } else {
                                    showErrorMessage("message-box", body.message);
                                }
                            } else {
                                showErrorMessage("message-box", response.message);
                            }
                        }
                    });
                } else {
                    inputSyncLoopPath.readOnly = true;
                }

                disaplyCPL(document.getElementById("cplContent"));
            }
        }
    });
    async function disaplyCPL(box) {
        const tablesContainer = createDOM("div", {style: "display: flex; gap: 32px; width: 100%;"});
        box.appendChild(tablesContainer);

        const cplContainer = createDOM("div", {class:"releaseDetailsContainer", style:"flex:2; min-width:0;"});
        tablesContainer.appendChild(cplContainer);

        const cplTable = createDOM("table", { id:"cplTable"});
        cplContainer.appendChild(cplTable);

        const cplTableHead = createDOM("thead", {class: "trHeader"});
        cplTable.appendChild(cplTableHead);
        const cplTableHeadRow = createDOM("tr");
        cplTableHead.appendChild(cplTableHeadRow);
        const cplIdCell = createDOM("th", {class:"idCell"});
        cplTableHeadRow.appendChild(cplIdCell);
        cplIdCell.innerText = "CPL ID";
        const cplUuidCell = createDOM("th");
        cplTableHeadRow.appendChild(cplUuidCell);
        cplUuidCell.innerText = "CPL UUID";
        const cplNameCell = createDOM("th");
        cplTableHeadRow.appendChild(cplNameCell);
        cplNameCell.innerText = "CPL Name";
        const cplPathCell = createDOM("th");
        cplTableHeadRow.appendChild(cplPathCell);
        cplPathCell.innerText = "CPL Path";
        const cplActionCell = createDOM("th", {class: "actionCell"});
        cplTableHeadRow.appendChild(cplActionCell);
        const imgAddCpl = createDOM("img", {class:"image-line-add", src:"/add.png", id:"createCPL"});
        cplActionCell.appendChild(imgAddCpl);
        const servPairJson = {id_serv_pair_config : -1};
        const servPairOptions = { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(servPairJson) };
        let servPairResponse = await (await fetch(`/getServerPair`, servPairOptions)).json();
        let servPairs = [];
        if (servPairResponse.ok) {
            if (servPairResponse.data.servPairs != "") {
                for (const servPair of servPairResponse.data.servPairs.servPair) {
                    servPairs.push({id_serv_pair_config: servPair.$.id_serv_pair_config, name: servPair.$.name});
                }
            }
        }
        const cplJson = { id_content: id_content, id_type: id_type, id_localisation: id_localisation};
        const cplOptions = { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(cplJson) };
        let cplResponse = await (await fetch(`/getCPL`, cplOptions)).json();
        let cplIds = [];
        if (cplResponse.ok == true) {
            if (cplResponse.data.cpls != "") { 
                for (const cpl of cplResponse.data.cpls.cpl) {
                    console.log(cpl);
                    const cplTableRow = createDOM("tr");
                    cplTable.appendChild(cplTableRow);
                    const cplIdCell = createDOM("td", {align:"center", valign:"center"});
                    cplTableRow.appendChild(cplIdCell);
                    let id = cpl.$.id_serv_pair_config + "_" + cpl.$.id_content + "_" + cpl.$.id_type + "_" + cpl.$.id_localisation;
                    cplIds.push(id);
                    servPairs = servPairs.filter(servPair => servPair.id_serv_pair_config != cpl.$.id_serv_pair_config);
                    cplIdCell.innerText = id;
                    const cplUuidCell = createDOM("td", {align:"center", valign:"center"});
                    cplTableRow.appendChild(cplUuidCell);
                    cplUuidCell.innerText = cpl.$.uuid;
                    const cplNameCell = createDOM("td", {align:"center", valign:"center"});
                    cplTableRow.appendChild(cplNameCell);
                    cplNameCell.innerText = cpl.$.name;
                    const cplPathCell = createDOM("td", {align:"center", valign:"center"});
                    cplTableRow.appendChild(cplPathCell);
                    cplPathCell.innerText = cpl.$.path_cpl;
                    const cplActionCell = createDOM("td", {class: "actionCell"});
                    cplTableRow.appendChild(cplActionCell);
                    const imgDeleteCpl = createDOM("img", {class:"image-line-add", src:"/remove.png", id:"removeCPLRow"});
                    cplActionCell.appendChild(imgDeleteCpl);
                    imgDeleteCpl.addEventListener("click", async function(){ 
                        if (confirm("Confirme la suppression du cpl : " + cpl.$.id_serv_pair_config + "_" + id_content + "_" + id_type + "_" + id_localisation +" ?")) {
                            const json = { id_content: id_content, id_type: id_type, id_localisation: id_localisation, id_serv_pair_config: cpl.$.id_serv_pair_config, typeOfElement:"CPL" };
                            const options = { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(json) };
                            let response = await fetch(`/deleteReleaseCPL`, options);
                            if (response.ok == true) {
                                const body = await response.json();
                                if (body.code == 200) { 
                                    window.location.reload();
                                }
                                else {
                                    showErrorMessage("message-box", body.message);
                                }
                            }
                            else {
                                showErrorMessage("message-box", response.message);
                            }
                        }
                    });
                }
                const syncContainer = createDOM("div", {class:"releaseDetailsContainer", style:"flex:1; min-width:0;"});
                tablesContainer.appendChild(syncContainer);
                disaplySync(syncContainer, true, cplIds);
            }
            else {
                const syncContainer = createDOM("div", {class:"releaseDetailsContainer", style:"flex:1; min-width:0;"});
                tablesContainer.appendChild(syncContainer);
                disaplySync(syncContainer, false, []);
            }
        }
        imgAddCpl.addEventListener("click", async function(){
            /*const imageAdd = document.getElementById("createCPL");
            imageAdd.style.display = "none";
            const newCplRow = createDOM("tr");
            cplTable.appendChild(newCplRow);
            const newCplIdCell = createDOM("td", {align:"center", valign:"center"});
            newCplRow.appendChild(newCplIdCell);
            const newCplIdSelect = createDOM("select", {id:"newCplIdSelect"});
            newCplIdCell.appendChild(newCplIdSelect);
            if (servPairs.length == 0) {
                const option = createDOM("option", {value:-1, text:"No Server Pair available", selected:true, style:"display:none"});
                newCplIdSelect.appendChild(option);
            }
            else {
                const option = createDOM("option", {value:-1, text:"Choissier votre SeverPair", selected:true, style:"display:none"});
                newCplIdSelect.appendChild(option);
                for (const servPair of servPairs) {
                    const option = createDOM("option", {value:servPair.id_serv_pair_config, text:servPair.name});
                    newCplIdSelect.appendChild(option);
                }
            }
            const newCplUuidCell = createDOM("td", {align:"center", valign:"center"});
            newCplRow.appendChild(newCplUuidCell);
            const newCplUuidInput = createDOM("input", {type:"text", id:"newCplUuidInput"});
            newCplUuidCell.appendChild(newCplUuidInput);
            const newCplNameCell = createDOM("td", {align:"center", valign:"center"});
            newCplRow.appendChild(newCplNameCell);
            const newCplNameInput = createDOM("input", {type:"text", id:"newCplNameInput"});
            newCplNameCell.appendChild(newCplNameInput);
            const newCplPathCell = createDOM("td", {align:"center", valign:"center"});
            newCplRow.appendChild(newCplPathCell);
            const newCplPathInput = createDOM("input", {type:"text", id:"newCplPathInput"});
            newCplPathCell.appendChild(newCplPathInput);
            const newCplActionCell = createDOM("td", {class: "actionCell"});
            newCplRow.appendChild(newCplActionCell);
            const imgAddCpl = createDOM("img", {class:"image-line-add", src:"/add.png", id:"createCPLRow"});
            newCplActionCell.appendChild(imgAddCpl);
            imgAddCpl.addEventListener("click", async function(){
                const newCplIdSelect = document.getElementById("newCplIdSelect");
                const newCplUuidInput = document.getElementById("newCplUuidInput");
                const newCplNameInput = document.getElementById("newCplNameInput");
                const newCplPathInput = document.getElementById("newCplPathInput");
                newCplIdSelect.style.backgroundColor = "";
                newCplUuidInput.style.backgroundColor = "";
                newCplNameInput.style.backgroundColor = "";
                newCplPathInput.style.backgroundColor = "";
                if (newCplIdSelect.value == -1) {
                    newCplIdSelect.style.backgroundColor = "red";
                    showErrorMessage("message-box", "Content is empty");
                }
                else if (newCplUuidInput.value == "") {
                    newCplUuidInput.style.backgroundColor = "red";
                    showErrorMessage("message-box", "Content is empty");
                }
                else if (newCplNameInput.value == "") {
                    newCplNameInput.style.backgroundColor = "red";
                    showErrorMessage("message-box", "Content is empty");
                }
                else if (newCplPathInput.value == "") {
                    newCplPathInput.style.backgroundColor = "red";
                    showErrorMessage("message-box", "Content is empty");
                }
                else {
                    const json = { id_content: id_content, id_type: id_type, id_localisation: id_localisation, id_serv_pair_config: newCplIdSelect.value, CPL_uuid: newCplUuidInput.value, CPL_name: newCplNameInput.value, CPL_path: newCplPathInput.value };
                    const options = { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(json) };
                    let response = await fetch(`/createNewCPL`, options);
                    if (response.ok == true) {
                        const body = await response.json();
                        if (body.code == 200) { 
                            window.location.reload();
                        }
                        else {
                            showErrorMessage("message-box", body.message);
                        }
                    }
                    else {
                        showErrorMessage("message-box", response.message);
                    }
                }
            });*/
        });
        //if (cplResponse.data.cpls == "") { imgAddCpl.dispatchEvent(new Event('click')); }
    }
    async function disaplySync(box,active,cplIds) {
        const syncContainer = createDOM("div", {class:"releaseDetailsContainer"});
        box.appendChild(syncContainer);
        const syncTable = createDOM("table", {id:"syncTable"});
        syncContainer.appendChild(syncTable);

        const syncTableHead = createDOM("thead", {class: "trHeader"});
        syncTable.appendChild(syncTableHead);
        const syncTableHeadRow = createDOM("tr");
        syncTableHead.appendChild(syncTableHeadRow);
        const syncIdCell = createDOM("th", {class:"idCell"});
        syncTableHeadRow.appendChild(syncIdCell);
        syncIdCell.innerText = "Sync ID";
        const syncPathCell = createDOM("th");
        syncTableHeadRow.appendChild(syncPathCell);
        syncPathCell.innerText = "Sync Path";
        const syncActionCell = createDOM("th", {class: "actionCell"});
        syncTableHeadRow.appendChild(syncActionCell);
        const imgAddSync = createDOM("img", {class:"image-line-add", src:"/add.png", id:"createSync"});
        syncActionCell.appendChild(imgAddSync);
        const syncJson = { id_content: id_content, id_type: id_type, id_localisation: id_localisation};
        const syncOptions = { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(syncJson) };
        let syncResponse = await (await fetch(`/getSync`, syncOptions)).json();
        const syncTableBody = createDOM("tbody");
        syncTable.appendChild(syncTableBody);
        if (syncResponse.ok == true) {
            if (syncResponse.data.syncs != "") {
                for (const sync of syncResponse.data.syncs.sync) {
                    const syncTableRow = createDOM("tr");
                    syncTableBody.appendChild(syncTableRow);
                    const syncIdCell = createDOM("td", {align:"center", valign:"center"});
                    syncTableRow.appendChild(syncIdCell);
                    cplIds = cplIds.filter(cplId => cplId != sync.$.id_serv_pair_config + "_" + sync.$.id_content + "_" + sync.$.id_type + "_" + sync.$.id_localisation);
                    syncIdCell.innerText = sync.$.id_serv_pair_config + "_" + sync.$.id_content + "_" + sync.$.id_type + "_" + sync.$.id_localisation;
                    const syncPathCell = createDOM("td", {align:"center", valign:"center"});
                    syncTableRow.appendChild(syncPathCell);
                    syncPathCell.innerText = sync.$.path_sync;
                    const syncActionCell = createDOM("td", {class: "actionCell"});
                    syncTableRow.appendChild(syncActionCell);
                    const imgDeleteSync = createDOM("img", {class:"image-line-add", src:"/remove.png", id:"removeSyncRow"});
                    syncActionCell.appendChild(imgDeleteSync);
                    imgDeleteSync.addEventListener("click", async function(){
                        if (confirm("Confirme la suppression du sync : " + sync.$.id_serv_pair_config + "_" + id_content + "_" + id_type + "_" + id_localisation +" ?")) {
                            const json = { id_content: id_content, id_type: id_type, id_localisation: id_localisation, id_serv_pair_config: sync.$.id_serv_pair_config, typeOfElement:"SYNC" };
                            const options = { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(json) };
                            let response = await fetch(`/deleteSync`, options);
                            if (response.ok == true) {
                                const body = await response.json();
                                if (body.code == 200) {
                                    window.location.reload();
                                }
                                else {
                                    showErrorMessage("message-box", body.message);
                                }
                            }
                            else {
                                showErrorMessage("message-box", response.message);
                            }
                        }
                    });
                }
            }
        }
        if (active) {
            imgAddSync.addEventListener("click", async function(){
                const imageAdd = document.getElementById("createSync");
                imageAdd.style.display = "none";
                const newSyncRow = createDOM("tr");
                syncTable.appendChild(newSyncRow);
                const newSyncIdCell = createDOM("td", {align:"center", valign:"center"});
                newSyncRow.appendChild(newSyncIdCell);
                const newSyncIdSelect = createDOM("select", {type:"text", id:"newSyncIdSelect"});
                newSyncIdCell.appendChild(newSyncIdSelect);
                if (cplIds.length == 0) {
                    const option = createDOM("option", {value:-1, text:"No CPL available", selected:true, style:"display:none"});
                    newSyncIdSelect.appendChild(option);
                }
                else {
                    const option = createDOM("option", {value:-1, text:"Choissier votre CPL", selected:true, style:"display:none"});
                    newSyncIdSelect.appendChild(option);
                    for (const cplId of cplIds) {
                        const option = createDOM("option", {value:cplId, text:cplId});
                        newSyncIdSelect.appendChild(option);
                    }
                }
                const newSyncPathCell = createDOM("td", {align:"center", valign:"center"});
                newSyncRow.appendChild(newSyncPathCell);
                const newSyncPathInput = createDOM("input", {type:"text", id:"newSyncPathInput"});
                newSyncPathCell.appendChild(newSyncPathInput);
                const newSyncActionCell = createDOM("td", {class: "actionCell"});
                newSyncRow.appendChild(newSyncActionCell);
                const imgAddSync = createDOM("img", {class:"image-line-add", src:"/add.png", id:"createSyncRow"});
                newSyncActionCell.appendChild(imgAddSync);
                imgAddSync.addEventListener("click", async function(){
                    const newSyncIdSelect = document.getElementById("newSyncIdSelect");
                    const newSyncPathInput = document.getElementById("newSyncPathInput");
                    newSyncIdSelect.style.backgroundColor = "";
                    newSyncPathInput.style.backgroundColor = "";
                    if (newSyncIdSelect.value == -1) {
                        newSyncIdInput.style.backgroundColor = "red";
                        showErrorMessage("message-box", "Content is empty");
                    }
                    else if (newSyncPathInput.value == "") {
                        newSyncPathInput.style.backgroundColor = "red";
                        showErrorMessage("message-box", "Content is empty");
                    }
                    else {
                        let cplId = newSyncIdSelect.value.split("_");
                        const syncJson = { id_content: cplId[1], id_type: cplId[2], id_localisation: cplId[3], id_serv_pair_config: cplId[0], path_sync: newSyncPathInput.value };
                        const syncOptions = { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(syncJson) };
                        let syncResponse = await fetch(`/createSync`, syncOptions);
                        if (syncResponse.ok == true) {
                            const body = await syncResponse.json();
                            if (body.code == 200) { 
                                window.location.reload();
                            }
                            else {
                                showErrorMessage("message-box", body.message);
                            }
                        }
                        else {
                            showErrorMessage("message-box", syncResponse.message);
                        }
                    }
                });
            });
            if (syncResponse.data.syncs == "") { imgAddSync.dispatchEvent(new Event('click')); }
        }
        else {
            imgAddSync.style.display = "none";
        }
    }

    // Fonction pour charger les localisations depuis l'API
    async function loadLocalisations() {
        try {
            const json = JSON.stringify({});
            const options = { method:"POST", headers:{ "Content-Type": "application/json "}, body:json };
            const response = await fetch(`/getLocalisations`, options);
            const result = await response.json();
            
            if (result.ok && result.data && result.data.localisations) {
                contentLocalisation = {};
                if (result.data.localisations.localisation) {
                    // Si c'est un tableau
                    if (Array.isArray(result.data.localisations.localisation)) {
                        for (const loc of result.data.localisations.localisation) {
                            contentLocalisation[loc.$.id] = loc.$.name;
                        }
                    } else {
                        // Si c'est un seul élément
                        contentLocalisation[result.data.localisations.localisation.$.id] = result.data.localisations.localisation.$.name;
                    }
                }
            }
        } catch(error) {
            console.error("Erreur lors du chargement des localisations:", error);
        }
    }

    async function loadTypes() {
        try {
            const json = JSON.stringify({});
            const options = { method:"POST", headers:{ "Content-Type": "application/json "}, body:json };
            const response = await fetch(`/getTypes`, options);
            const result = await response.json();
            
            if (result.ok && result.data && result.data.types) {
                contentType = {};
                if (result.data.types.type) {
                    if (Array.isArray(result.data.types.type)) {
                        for (const type of result.data.types.type) {
                            contentType[type.$.id] = type.$.name;
                        }
                    } else {
                        contentType[result.data.types.type.$.id] = result.data.types.type.$.name;
                    }
                }
            }
        } catch(error) {
            console.error("Erreur lors du chargement des types:", error);
        }
    }

    async function loadContent() {
        const json = JSON.stringify({id_content: id_content});
        const options = { method:"POST", headers:{ "Content-Type": "application/json "}, body:json };
        const response = await fetch(`/getContents`, options);
        const result = await response.json();

        if (result.ok && result.data && result.data.content) {
            const content = result.data.content;
            const inputTitle = document.getElementById("title");
            inputTitle.value = content.$.title;
            contentTitle = content.$.title;
        }
    }

    function getLocalisationName(id, fallbackName) {
        if (fallbackName && fallbackName.trim() !== "") {
            return fallbackName;
        }
        return contentLocalisation[id] || `Localisation ${id}`;
    }

    function getTypeName(id, fallbackName) {
        if (fallbackName && fallbackName.trim() !== "") {
            return fallbackName;
        }
        return contentType[id] || `Type ${id}`;
    }
</script>

<%- include ("../foot") %>