<%- include ("../head") %>
<%- include ("../navigation") %>

<div class="block" id="groups">
    <h1>GROUPS</h1>
    <ul class="ul-model" id="ul-group"></ul>
    <div id="message-box" class="success"></div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', async function(){
        let response = await getGroups();
        if (response.ok == true) {
            drawGroups(response.data.groups.group);
        } else {
            showErrorMessage("Erreur lors de la récupération des groupes", 3000);
        }
    });

    async function getGroups() {
        try {
            const json = { id_group: -1 };
            const options = { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(json) };
            const response = await fetch('/getGroupsFilter', options);
            if (!response.ok) return null;
            const data = await response.json();
            return data;
        } catch (error) {
            showErrorMessage("Erreur lors de la récupération des groupes : " + error, 3000);
            return null;
        }
    }

    // Construction de l'arbre de groupes
    function buildGroupTree(groups) {
        const groupMap = {};
        const roots = [];
        groups.forEach(g => {
            groupMap[g.$.id_group] = { ...g.$, children: [] };
        });
        groups.forEach(g => {
            const parentId = g.$.id_group_1;
            if (parentId && parentId != -1 && groupMap[parentId]) {
                groupMap[parentId].children.push(groupMap[g.$.id_group]);
            } else {
                roots.push(groupMap[g.$.id_group]);
            }
        });
        return roots;
    }

    function drawGroups(groups) {
        const tabGroups = document.getElementById("ul-group");
        // -- remove all childs
        let child = tabGroups.lastChild;
        while(child){
            tabGroups.removeChild(child);
            child = tabGroups.lastChild;
        }

        // -- create add line
        const liAdd = document.createElement("li");
        liAdd.className = "list-item-add";
        const imgAdd = document.createElement("img");
        imgAdd.className = "image-line-add";
        imgAdd.src = "/add.png";
        imgAdd.title = "add";
        imgAdd.addEventListener('click', async function(){
            window.location.assign("/group?id=-1");
        });
        liAdd.appendChild(imgAdd);
        tabGroups.appendChild(liAdd);

        if (!groups || groups.length === 0) {
            const li = document.createElement("li");
            li.className = "li-model";
            li.innerText = "Aucun groupe trouvé.";
            tabGroups.appendChild(li);
            return;
        }

        // Construction de l'arbre
        const tree = buildGroupTree(groups);

        // Affichage récursif avec indentation
        function renderGroupNode(node, level) {
            const li = document.createElement("li");
            li.className = "li-model";
            li.id = node.id_group;
            li.style.paddingLeft = (level * 24) + "px";
            li.addEventListener('click', function(e){
                e.stopPropagation();
                window.location.assign("/group?id=" + li.id);
            });
            const imageGroup = document.createElement("img");
            imageGroup.className = "image-line";
            imageGroup.src = "group.png";
            li.appendChild(imageGroup);
            const nameDom = document.createElement("div");
            nameDom.className = "param";
            nameDom.innerText = node.name;
            li.appendChild(nameDom);
            tabGroups.appendChild(li);
            if (node.children && node.children.length > 0) {
                node.children.forEach(child => renderGroupNode(child, level + 1));
            }
        }
        tree.forEach(root => renderGroupNode(root, 0));
    }
</script>

<%- include ("../foot") %>