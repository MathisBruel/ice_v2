#include <cstdlib>
#include <iostream>
#include <queue>

#pragma once
#include "Poco/Runnable.h"
#include "Poco/Logger.h"
#include "Poco/Thread.h"
#include "Poco/Mutex.h"
#include "image.h"
#include "seam.cuh"
#include "portable_timer.h"

class SeamCarvingThread : public Poco::Runnable
{

public:

    enum State {
        IDLE,
        WORKING,
        FINISHED
    };

    SeamCarvingThread();
    ~SeamCarvingThread();
    void startThread(int64_t idx, Image* img, bool startStage = false);
    void releaseDatas();
    void setSeams(int* left, int* right) {seamsLeft = left; seamsRight = right;}
    void setSobel(float* left, float* right) {sobelLeft = left; sobelRight = right;}

    State getState() {return state;}
    Image* getOut() {return out;}
    int64_t getIdx() {return idx;}
    int* getLeftSeams() {return seamsLeft;}
    int* getRightSeams() {return seamsRight;}
    float* getLeftSobel() {return sobelLeft;}
    float* getRightSobel() {return sobelRight;}

protected:

    void run();

private:

    // -- for thread control
	Poco::Thread* thread;
	bool stop;

    State state;
    Poco::Mutex mutex;

    // -- for image processing
    int64_t idx;
    Image* in;
    Image* out;
    int* seamsLeft;
    int* seamsRight;
    bool startStage;
    float* sobelLeft;
    float* sobelRight;
};